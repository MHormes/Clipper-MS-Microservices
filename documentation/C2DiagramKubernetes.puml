@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

!define DEVICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons
!define FONTAWESOME https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/font-awesome-5
!include DEVICONS/java.puml
!include FONTAWESOME/users.puml

Person(user, "User", "User of Clipper MS", $sprite="users")
Person(admin, "admin", "Admin of Clipper MS", $sprite="users")

System_Boundary(c1, "Kubernetes Stack"){
    Container(ingress, "Ingress", "K3D Ingress controller", "Ingress controller to redirect traffic to correct module", $sprite="kube")

    Boundary(a, ""){
    Container(feService, "Client service", "Kubernetes Service", "Service to redirect to traffic deployment", $sprite="react")
    Container(feDeploy, "Client deployment", "Kubernetes Deployment", "Contains user-interface of Clipper MS", $sprite="react")
    }
    Boundary(b, ""){
    Container(tradService, "Trading service", "Kubernetes Service", "Service to redirect to traffic deployment", $sprite="spring")
    Container(tradDeploy, "Trading deployment", "Kubernetes Deployment", "Contains spring boot microservice", $sprite="spring")
    }
    Boundary(c, ""){
    Container(collService, "Collection service", "Kubernetes Service", "Service to redirect to traffic deployment", $sprite="spring")
    Container(collDeploy, "Collection Deployment", "Kubernetes Deployment", "Contains spring boot microservice", $sprite="spring")
    }
    Boundary(d, ""){
    Container(rabbitMQService, "Message bus service", "Kubernetes Service", "Service to redirect to traffic deployment", $sprite="rabbit")
    Container(rabbitMQDeploy, "Message bus deployment", "Kubernetes Deployment", "Module responsible for communicating between modules", $sprite="rabbit")
    }
    Boundary(e, ""){
    Container(keycloakService, "Keycloak service", "Kubernetes service", "Service to redirect to traffic deployment", $sprite="keycloak")
    Container(keycloakDeploy, "Keycloak deployment", "Kubernetes deployment", "Module responsible for user Authentication", $sprite="keycloak")
    }
}

ContainerDb(dbTrad, "Trading Database", "Postgres", "Holds all trading information", $sprite="postgresql")
ContainerDb(dbColl, "Collection Database", "Postgres", "Holds all collection information", $sprite="postgresql")
ContainerDb(dbKeycloak, "Keycloak Database", "Postgres", "Holds all keycloak information", $sprite="postgresql")

System_Ext(ai, "Matching AI", "AI model used to match trade-able clippers to a wishlist")
System_Ext(log, "Google SSO", "SSO service used to authenticate users via an OAuth2.0 grant flow")


Rel(user, ingress, "Uses")
Rel(admin, ingress, "Uses")

Rel(ingress, tradService, "HTTPS request redirects to")
Rel(ingress, collService, "HTTPS request redirects to")
Rel(ingress, feService,  "HTTPS request redirects to")

Rel(feDeploy, keycloakService, "Handles login via OAuth2.0 grant flow (Authorization code + PKCE)")
Rel(tradDeploy, keycloakService, "Validates user auth using")
Rel(collDeploy, keycloakService, "Validates user auth using")

'Lines are commented for claritieâ€™s sake
'Rel(feDeploy, feService, "Gets exposed by")
'Rel(tradDeploy, tradService, "Gets exposed by")
'Rel(collDeploy, collService, "Gets exposed by")
'Rel(keycloakDeploy, keycloakService, "Gets exposed by")
'Rel(rabbitMQDeploy, rabbitMQService, "Gets exposed by")

Rel(tradDeploy, rabbitMQService, "Publish and subscribe to events")
Rel(collDeploy, rabbitMQService, "Publish and subscribe to events")

Rel(tradDeploy, dbTrad, "Reads from and writes to using JDBC (SQL) & Hibernate (ORM)")
Rel(collDeploy, dbColl, "Reads from and writes to using JDBC (SQL) & Hibernate (ORM)")
Rel(keycloakDeploy, dbKeycloak, "Reads from and writes to")

Rel(tradDeploy, ai, "API call - research needed")
Rel(keycloakDeploy, log, "API call")

SHOW_FLOATING_LEGEND()
@enduml