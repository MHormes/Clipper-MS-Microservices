version: '3.7'

networks:
  backend:
    name: backend

services:

#  Rabbit is running in Kubernetes, but can be run in Docker if services need to be run locally -> debug
  #==================RABBITMQ================
  rabbitmq-service:
    container_name: clipperms.rabbitmq-service
    hostname: rabbitmq-service
    image: rabbitmq:management
    ports:
      - "5672:5672"
      - "15672:15672"

    networks:
      - backend

  #==================MSSQL===================
  database-dev:
    build:
      context: .init
      dockerfile: Dockerfile
    container_name: clipperms.mssql-database
    hostname: database-dev

    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 1
        window: 120s

    environment:
      ACCEPT_EULA: Y
      SA_PASSWORD: ${DATABASE_DEV_PASSWORD}
      MSSQL_USER: ${DATABASE_DEV_USERNAME}
      MSSQL_PASSWORD: ${DATABASE_DEV_PASSWORD}

    volumes:
      - ${DATABASE_DEV_VOLUME}:/var/opt/mssql/data

    ports:
      - "1433:1433"

    networks:
      - backend

  #==================KEYCLOAK================
  keycloak-service:
    image: quay.io/keycloak/keycloak:22.0.0
    container_name: clipperms.keycloak
    environment:
      KC_DB: mssql
      KC_DB_URL: jdbc:sqlserver://database-dev;databaseName=keycloak;trustServerCertificate=false;encrypt=false
      KC_DB_USERNAME: ${DATABASE_DEV_USERNAME}
      KC_DB_PASSWORD: ${DATABASE_DEV_PASSWORD}

      KC_TRANSACTION_XA_ENABLED: false

      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KEYCLOAK_LOGLEVEL: INFO

    ports:
      - "8180:8180"

    depends_on:
      - database-dev

    command:
      - start-dev --http-port=8180 #--log-level=DEBUG #start keycloak in dev mode with port 8180

    volumes:
      - ${KEYCLOAK_VOLUME}/json/export:/opt/keycloak/data #map the export folder of the linux machine to my windows folder
    networks:
      - backend
